package Final;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.FontMetrics;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import javax.swing.ImageIcon;
import javax.swing.JPanel;
import javax.swing.Timer;

public class Panel extends JPanel implements ActionListener {
	
	//設定活動（視窗）邊界
    private int Panel_Width = 600;
    private int Panel_Height = 600;
    
    private int Body_Size = 50;
    private int Body_Total = 900;
    
    //移動速度，單位毫秒
    private int Speed;

    private int x[] = new int[Body_Total];
    private int y[] = new int[Body_Total];

    private int body_tmp;
    private int apple_x;
    private int apple_y;

    //預設起始位置朝右邊
    private boolean upDirection = false;
    private boolean downDirection = false;
    private boolean leftDirection = false;
    private boolean rightDirection = true;
    
    //判斷是否 game over
    private boolean inGame = true;

    private Timer timer;
    private Image body_img;
    private Image apple_img;
    private Image head_img;

    
    public Panel() {

        addKeyListener(new Key_Detect());
        setBackground(Color.black);
        setFocusable(true);
        //setSize 跟 setPreferredSize 網路上說好像有差
        setPreferredSize(new Dimension(Panel_Width, Panel_Height));
        loadImages();
        initGame();
    }

    private void loadImages() {

        ImageIcon b = new ImageIcon("src/Final/resources/body.png");
        body_img = b.getImage();

        ImageIcon a = new ImageIcon("src/Final/resources/apple.png");
        apple_img = a.getImage();

        ImageIcon h = new ImageIcon("src/Final/resources/head.png");
        head_img = h.getImage();
    }

    private void initGame() {
    	//身體節數（這可以未來開發難易度調整，跟速度一樣）
        body_tmp = 3;
        //移動速度
        Speed = 140;

        for (int z = 0; z < body_tmp; z++) {
            x[z] = Panel_Width/2 - z * 10;
            y[z] = Panel_Height/2;
        }
        
        //放置第一顆蘋果
        locateapple();
        //ActionListener listener就是這個class
        timer = new Timer(Speed, this);
        timer.start();
    }
    
    //整個遊戲進行主枝幹
    @Override
    public void actionPerformed(ActionEvent e) {

        if (inGame) {
        	//檢查吃到蘋果了沒
            checkapple();
            //有沒有碰撞到邊界
            checkCollision();
            move();
        }

        repaint();
    }
    

    @Override
    public void paintComponent(Graphics g) {
        super.paintComponent(g);

        doDrawing(g);
    }
    
    //畫圖
    private void doDrawing(Graphics g) {
        
    	//如果還在遊戲裡面
        if (inGame) {

            g.drawImage(apple_img, apple_x, apple_y, this);

            for (int z = 0; z < body_tmp; z++) {
            	//先畫出頭
                if (z == 0) {
                    g.drawImage(head_img, x[z], y[z], this);
                } else {
                //在畫出身替
                    g.drawImage(body_img, x[z], y[z], this);
                }
            }

        } else {

            gameOver(g);
        }        
    }

    //遊戲結束畫面
    private void gameOver(Graphics g) {
        
        String msg = "遊戲結束";
        Font small = new Font("Roboto", Font.BOLD, 14);
        FontMetrics metr = getFontMetrics(small);

        g.setColor(Color.black);
        setBackground(Color.red);
        g.setFont(small);
        g.drawString(msg, (Panel_Width- metr.stringWidth(msg)) / 2 , Panel_Height / 2);
    }
    
    //檢查頻果接觸
    private void checkapple() {

        if ((x[0] == apple_x) && (y[0] == apple_y)) {

            body_tmp++;
            locateapple();
        }
    }

    private void move() {

        for (int z = body_tmp; z > 0; z--) {
            x[z] = x[(z - 1)];
            y[z] = y[(z - 1)];
        }

        if (leftDirection) {
            x[0] -= Body_Size;
        }

        if (rightDirection) {
            x[0] += Body_Size;
        }

        if (upDirection) {
            y[0] -= Body_Size;
        }

        if (downDirection) {
            y[0] += Body_Size;
        }
    }

    //碰撞判斷（遊戲結束判斷）
    private void checkCollision() {
    	//有沒有咬到自己
        for (int z = body_tmp; z > 0; z--) {

            if ((x[0] == x[z]) && (y[0] == y[z])) {
                inGame = false;
            }
        }
        //有沒有超出邊界
        if (y[0] >= Panel_Height) {
            inGame = false;
        }

        if (y[0] < 0) {
            inGame = false;
        }

        if (x[0] >= Panel_Width) {
            inGame = false;
        }

        if (x[0] < 0) {
            inGame = false;
        }
        
        if (!inGame) {
            timer.stop();
        }
    }
    
    //依照身體長度結合隨機變數，將整個畫面分割成Body_Size的小正方型，再讓蘋果生出來
    private void locateapple() {

        int r = (int) (Math.random() * Panel_Width/Body_Size);
        apple_x = ((r * Body_Size));

        r = (int) (Math.random() * Panel_Height/Body_Size);
        apple_y = ((r * Body_Size));
    }
    
    

    //鍵盤偵測上下左右鍵
    private class Key_Detect extends KeyAdapter {

        @Override
        public void keyPressed(KeyEvent e) {

            int key = e.getKeyCode();

            if ((key == KeyEvent.VK_LEFT) && (!rightDirection)) {
                leftDirection = true;
                upDirection = false;
                downDirection = false;
            }

            if ((key == KeyEvent.VK_RIGHT) && (!leftDirection)) {
                rightDirection = true;
                upDirection = false;
                downDirection = false;
            }

            if ((key == KeyEvent.VK_UP) && (!downDirection)) {
                upDirection = true;
                rightDirection = false;
                leftDirection = false;
            }

            if ((key == KeyEvent.VK_DOWN) && (!upDirection)) {
                downDirection = true;
                rightDirection = false;
                leftDirection = false;
            }
        }
    }
}